/*
Метод forEach
Если нам нужно перебрать массив – мы можем использовать forEach  !!!!!
Метод forEach ничего не возвращает, его используют только для перебора, как более «элегантный» вариант, чем обычный цикл for.

Метод map
Если нам нужно перебрать массив и вернуть данные для каждого элемента – мы используем map
Метод map создает новый массив из элементов, которые будут являться результатами выполнения callback-функции. 
const numbers = [2, 5, 7, 9];
const results = numbers.map(n => n ** 5);

Методы arr.reduce и arr.reduceRight похожи на методы выше, но они немного сложнее. 
Они используются для вычисления какого-нибудь единого значения на основе всего массива.

Метод every 
Метод every вернет true если  все массивы  элемента  будут true
Метод every() работает аналогично some(). Но логика обратна. Он работает до тех пор, пока функция возвращает true.
Если массив пустой  every вернет true

Метод some 
Метод some вернет true если  хотя бы  один из элементов  массива  будет true
Метод some() возвращает true / false на каждой итерации. Как только метод вернул true, итератор прекращает работу и возвращает true. 
(Например, если на первой итерации - true - то работа прекращается, и последующих итераций не будет).
 Иначе, если ни на одном шаге не вренется true, вернется false.
Если массив пустой some вернет false
 В соответствии с правилами математики для пустого массива метод every() возвращает true, а метод some() возвращает false.


 Метод slice  
 Этот метод копирует указанные элементы массива и создает из них новый массив.
 Первый аргумент – индекс элемента с которого нужно начинать копирование.
 Второй аргумент – индекс до которого нужно копировать элементы не включая его. 
 languages.slice(2, 4) – в данном случае, мы говорим: "Скопируй элементы с индексом 2 и 3". Элемент с индексом 4 не будет включен.


 Метод splice
 Первый аргумент – это указание индекса(позиции) элемента в массиве с которого нужно начинать удаление. 
 Второй аргумент – количество элементов, которые нужно удалить с указанной позиции.
 Итого, этим languages.splice(0, 2), мы сказали: "Удали 2 элемента начиная с индекса 0".
 У этого метода есть еще одно достоинство – умение добавлять элементы(любое количество) на место удаленных элементов. Пример:
 
 const languages = ['python', 'java', 'js'];
 
 languages.splice(0, 2, 'php', 'c#', 'c++');

 console.log(languages); // ['php', 'c#', 'c++', 'js']

 P.S. Данный метод изменяет массив "по месту", т.е. изменяет исходный массив.


 Метод indexOf

 Если значение не найдено возвращает -1 если найдено , то будет возвращен первый индекс по которому элемент найден в массиве

 проверить существует ли элемент в  массиве. Типы данных соблюдается строго т.е в массиве 4  console.log(a.indexOf("4")) вернет -1

                        let array1 = [1, 2, -2, -3, 4];

                        console.log(a.indexOf(4));    если элемент в  массиве не  равен  -1 , то элемент в массиве присутствует

                        if(array1.indexOf(4) !== -1){
                            console.log("Элемент присутствует")
                        }

*/
