/*
    Что такое схлопывание границ (margin collapsing)?
Вертикальные margin у соседних элементов объединяются между собой, что известно под термином «схлопывающиеся margin». 
Само схлопывание действует на два соседних блока или родительский и дочерний блоки, при этом примыкающие отступы не суммируются, 
а комбинируются в один.
Для margin слева и справа схлопывание никогда не применяется.
Отступы margin-top и margin-bottom иногда объединяются в один, с размером равным наибольшему из них (или размеру одного, если они равны).
Это поведение известно как схлопывание внешних отступов (margin collapsing).
padding-top: 1px;
border-top: 1px solid
display: flow-root

    Что такое кроссбраузерность?
Это корректная адаптивная верстка для правильного отображения сайта или приложения в разных браузерах и на разных устройствах.Другими словами созданный сайт должен
максимально одниково выглядеть в разных браузерах и его функциональность так же должна правильно работать и на мобильном устройстве и на компьютере.Для создания 
кроссбраузерности можно использовать много техник таких как семантичная верстка использование reset или normalize , использование медиа запросов  

    Что такое CSS препроцессор?
В наших проектах в Коде мы используем простой CSS-код. Он компактный и понятный. Но у нас маленькие проекты.
В больших проектах CSS-код разрастается настолько, что его поддержка и сопровождение становится отдельной сложной задачей. 
Чтобы её упростить, используют препроцессоры.
Препроцессор — инструмент, который берёт текст из одного документа, преобразует его по нужным правилам, и на выходе получается другой текст. 
В случае с CSS препроцессоры составляют финальный CSS-документ на основе более простого кода.
CSS-препроцессор является надстройкой над стандартным CSS, добавляющим ранее недоступные возможности, позволяющие ускорить написание кода, 
сделать его более понятным для разработчиков. Ускорение разработки и улучшение понимания, за счет использования более продвинутых синтаксических конструкций, 
являются приоритетной задачей всех CSS-препроцессоров.
В разработке используется три популярных препроцессора:

LESS;
SASS/SCSS;
Stalus.

    Как определить наличие свойства в объекте?
Можно воспользоваться одним из трех способов:
-   Самый распространненый способ hasOwnProperty   
Метод hasOwnProperty() возвращает логическое значение, указывающее, содержит ли объект указанное свойство.
                  
            const hero = {
                name: 'Batman'
                };
                
               console.log(hero.hasOwnProperty('name'));     // => true
                console.log(hero.hasOwnProperty('realName')); // => false

Имя метода hasOwnProperty() предполагает, что он ищет свойства в собственных свойствах объекта. Проще говоря, собственными свойствами являются те,
 которые определены непосредственно для объекта.

 -  Оператор in

 Оператор in в propName in object также определяет, существует ли свойство propName в object

             const hero = {
                name: 'Batman'
                };
                
                console.log('name' in hero);     // => true
                console.log('realName' in hero); // => false

Вот основное различие между методом hasOwnProperty() и оператором in: последний (in) проверяет не только собственные свойства, но и список унаследованных свойств.

                const hero = {
                name: 'Batman'
                };
                
                hero.toString; // => function() {...}
                
                console.log('toString' in hero); // => true

-   Сравнение с undefined

Если вы обращаетесь к несуществующему свойству объекта, результат будет undefined. Давайте рассмотрим пример:
                const hero = {
                    name: 'Batman'
                    };
                    
                    hero.name;     // => 'Batman'
                    hero.realName; // => undefined
hero.realName оценивается undefined, потому что свойство realName отсутствует. Теперь вы можете понять идею: давайте сравним с undefined, 
чтобы определить наличие свойства.
                    const hero = {
                        name: 'Batman'
                        };
                        
                        hero.name !== undefined;     // => true
                        hero.realName !== undefined; // => false

-   Обратится к свойству обьекта напрямую 
  Если свойство есть в обьекте , то оно вернет значенение , если свойства нет , то вернется undefined     
                const obj = {
                    "prop1": "foo"
                    "prop2": "bar"
                }                     
                
                console.log(obj["prop1"]) вернет "foo"
                console.log(obj["prop3"]) вернет undefined

    Что такое замыкание (Closure)?

    Что такое IIFE?

это JavaScript функция, которая выполняется сразу же после того, как она была определена.
Немедленно вызываемое функциональное выражение
            (function (){
            console.log("Это IIFE");
            })()
            переменные обьвленые внутри не видемы за ее пределами

    Что такое псевдомассив arguments?

    Разница между host-объектами и нативными объектами?
 Нативные объекты — это объекты, которые являются частью языка JavaScript, определенного в спецификации ECMAScript, такие как String, Math, RegExp, Object, Function и т.д.
Хост-объекты предоставляются средой выполнения (браузером или Node), такие как `window`, `XMLHTTPRequest` и т.д.

    Разница между event.target и event.currentTarget?

    Разница между .stopPropagation() и .stopImmediatePropagation()?

    Разница между событиями load и DOMContentLoaded?

    Разница между синхронными и асинхронными функциями?
Синхронные функции являются блокирующими в то время как  асинхронные нет 

    Функция создания набора дубликатов символов строки?

*/

const dupl = (str) => str.toUpperCase()
                     .split("")
                     .map((item, index) => item[0] + item.repeat(index) )
                     .join("-") 


let s = dupl("cwat"); // C-Ww-Aaa-Tttt
console.log(s);


























